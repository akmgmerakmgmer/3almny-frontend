import type {Metadata} from "next";
import {Source_Sans_3, Noto_Kufi_Arabic, Geist_Mono} from "next/font/google";
import "@/app/globals.css";
import {locales, type Locale, getDir} from "@/i18n/config";
import { AuthProvider } from "@/contexts/AuthContext";
import { ChatCacheProvider } from "@/contexts/ChatCacheContext";
import { AuthGate } from "@/components/auth/AuthGate";
import { CookieCleanup } from "@/components/CookieCleanup";

const appSans = Source_Sans_3({
  variable: "--font-app-sans",
  subsets: ["latin"],
  weight: ["400","500","600","700"],
  display: "swap",
});

const arabicSans = Noto_Kufi_Arabic({
  variable: "--font-arabic-sans",
  subsets: ["arabic"],
  weight: ["400","500","600","700"],
  display: "swap",
});

const geistMono = Geist_Mono({
  variable: "--font-geist-mono",
  subsets: ["latin"],
  weight: ["400","500","600"],
  display: "swap",
});

export const metadata: Metadata = {
  title: "Create Next App",
  description: "Generated by create next app",
};

export async function generateStaticParams() {
  return locales.map((lang) => ({lang}));
}

export default async function LangLayout({
  children,
  params,
}: Readonly<{
  children: React.ReactNode;
  params: Promise<{lang: string}>;
}>) {
  const {lang} = await params;
  const safeLang = (locales as readonly string[]).includes(lang) ? (lang as Locale) : "en";
  const dir = getDir(safeLang);

  return (
  <div lang={safeLang} dir={dir} className={`${appSans.variable} ${arabicSans.variable} ${geistMono.variable} antialiased font-sans min-h-dvh flex flex-col`}>
      <CookieCleanup />
      <AuthProvider>
        <ChatCacheProvider>
          <AuthGate>
            <main className="flex-1 min-h-0">{children}</main>
          </AuthGate>
        </ChatCacheProvider>
      </AuthProvider>
    </div>
  );
}
